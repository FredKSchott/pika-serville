import*as http from'http';import*as url from'url';import*as querystring from'querystring';class Serville{constructor(){this.bindings=[],this.logger=console.log,this.crashOnBindError=!0,this.server=http.createServer((a,b)=>{let c=url.parse(a.url,!0),d=decodeURIComponent(c.pathname);for(var e of this.bindings){let g=d.match(e.at);if(null!==g&&(!e.types||-1<e.types.indexOf(a.method))){let d={};for(var f in e.keys)d[e.keys[f]]=g[parseInt(f)+1];let h='';return a.on('data',(a)=>h+=a),void a.on('end',()=>{try{let f=e.cb({params:d,headers:a.headers,query:Object.assign(c.query,querystring.parse(h)),match:g});f instanceof Promise?f.then((a)=>{b.end(JSON.stringify(a))}):b.end(JSON.stringify(f))}catch(a){b.statusCode=500,b.end(JSON.stringify({status:'Server Error',error:this._log(a)})),this.crashOnBindError&&(this._log('Fatal binding error, aborting app. Your server should handle automatic restarting.'),process.exit(1))}})}}b.statusCode=404,b.end('{ "status": "404", "message": "Endpoint Not Found" }')})}at(a,b,c){let d=!1;if(!(a instanceof RegExp)){let b=/\/\:([a-zA-Z0-9_]+?)(?=\/|$)/g,c=a.match(b)||[];d=a.replace(/[\-\[\]\/\{\}\(\)\*\+\.\\\^\$\|]/g,'\\$&');for(let a of c)d=d.replace(a,'/(.+?)')}return this.bindings.push({at:d?new RegExp('^'+d+'$','i'):a,keys:[].map((a)=>a.substring(2)),cb:b,types:c}),this}get(a,b){this.at(a,b,['GET'])}post(a,b){this.at(a,b,['POST'])}put(a,b){this.at(a,b,['PUT'])}delete(a,b){this.at(a,b,['DELETE'])}on(a,b){return this.server.on(a,(a,c)=>b(a,c)),this}catch(a){return this.on('clientError',a),this}listen(a,b){return this.server.listen(a,b),this}_log(a){return this.logger(`[${new Date}] ${a}`),a}log(a){return this.logger=a,this}}export default(()=>new Serville);
