const http=require('http'),url=require('url'),querystring=require('querystring');class Serville{constructor(){this.bindings=[],this.logger=console.log,this.crashOnBindError=!0,this.server=http.createServer((a,b)=>{let c=url.parse(a.url,!0);for(var d of this.bindings)if(d.at.test(c.path)){let f={},g=c.path.match(d.at);for(var e in d.keys)f[d.keys[e]]=g[parseInt(e)+1];let h='';return a.on('data',(a)=>h+=a),void a.on('end',()=>{try{let e=d.cb({params:f,headers:a.headers,query:Object.assign(c.query,querystring.parse(h))});e instanceof Promise?e.then((a)=>{b.end(JSON.stringify(a))}):b.end(JSON.stringify(e))}catch(a){b.statusCode=500,b.end(JSON.stringify({status:'Server Error',error:this._log(a)})),this.crashOnBindError&&(this._log('Fatal binding error, aborting app. Your server should handle automatic restarting.'),process.exit(1))}})}b.statusCode=404,b.end('{ "status": "404", "message": "Endpoint Not Found" }')})}at(a,b){let c=/\/\:([a-zA-Z0-9_]+?)(?=\/|$)/g,d=a.match(c)||[],e=a.replace(/[\-\[\]\/\{\}\(\)\*\+\.\\\^\$\|]/g,'\\$&');for(let a of d)e=e.replace(a,'/(.+?)');return this.bindings.push({at:new RegExp('^'+e+'$','i'),keys:d.map((a)=>a.substring(2)),cb:b}),this}on(a,b){return this.server.on(a,(a,c)=>b(a,c)),this}catch(a){return this.on('clientError',a),this}listen(a,b){return this.server.listen(a,b),this}_log(a){return this.logger(`[${new Date}] ${a}`),a}log(a){return this.logger=a,this}}module.exports=()=>new Serville;
